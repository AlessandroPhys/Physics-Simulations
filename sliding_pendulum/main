from vpython import *

scene.userzoom = False
scene.userspin = False
scene.userpan = False
scene.autoscale = False
scene.center = vector(0, 1, 0)  # La cámara centrará su vista en este punto
scene.camera.pos = vector(0, 0, 6.5)
scene.width = 900
scene.height =600

l = 3.0  # Longitud del péndulo (m)
g = 9.81 # Gravedad (m/s²)

# Función vacía para el bind de los sliders
def dummy(val):
    pass

# Función para actualizar las etiquetas
def update_labels():
    x_label.text = f"x0 = {x_slider.value+5:.2f} m"
    vx_label.text = f"vx0 = {vx_slider.value:.2f} m/s"
    theta_label.text = f"theta0 = {theta_slider.value:.2f} rad"
    w_label.text = f"w0 = {w_slider.value:.2f} rad/s"
    M_label.text = f"M = {M_slider.value:.2f} kg"
    m_label.text = f"m = {m_slider.value:.2f} kg"

# Sliders para parámetros iniciales
scene.append_to_caption('\n Ajusta los parámetros iniciales antes de iniciar la simulación:\n')

x_slider = slider(min=-5, max=3, value=0, step=0.1, length=220, bind=dummy)
scene.append_to_caption('  x0\n')

vx_slider = slider(min=0, max=2, value=0, step=0.1, length=220, bind=dummy)
scene.append_to_caption('  vx0\n')

theta_slider = slider(min=0, max=pi/4, value=pi/15, step=0.01, length=220, bind=dummy)
scene.append_to_caption('  theta0\n')

w_slider = slider(min=0, max=0.2, value=0, step=0.1, length=220, bind=dummy)
scene.append_to_caption('  w0\n')

M_slider = slider(min=1, max=15, value=1, step=0.1, length=220, bind=dummy)
scene.append_to_caption('  M\n')

m_slider = slider(min=1, max=15, value=1, step=0.1, length=220, bind=dummy)
scene.append_to_caption('  m\n')

# Crear las etiquetas para mostrar los valores de los parámetros
x_label = label(pos=vector(0, -3.2, 0), text=f"x0 = {x_slider.value+5:.2f}", height=20, box=True, color=color.black)
vx_label = label(pos=vector(0, -2.6, 0), text=f"vx0 = {vx_slider.value:.2f}", height=20, box=True, color=color.black)
theta_label = label(pos=vector(0, -2, 0), text=f"theta0 = {theta_slider.value:.2f} rad", height=20, box=True, color=color.black)
w_label = label(pos=vector(-3, -2, 0), text=f"w0 = {w_slider.value:.2f}", height=20, box=True, color=color.black)
M_label = label(pos=vector(-3, -2.6, 0), text=f"M = {M_slider.value:.2f} kg", height=20, box=True, color=color.black)
m_label = label(pos=vector(-3, -3.2, 0), text=f"m = {m_slider.value:.2f} kg", height=20, box=True, color=color.black)


# Variables de control
run = False
current_index = 0  

def get_initial_conditions():
    x0 = x_slider.value
    vx0 = vx_slider.value
    theta0 = theta_slider.value
    w0 = w_slider.value
    M = M_slider.value
    m = m_slider.value
    
    return [x0, vx0, theta0, w0]

# Función de ecuaciones del sistema
def equations(state, M, m):
    x, vx, theta, w = state
    A = [[M + m, m * l * cos(theta)], [cos(theta), l]]
    b = [-m * l * w**2 * sin(theta), -g * sin(theta)]
    
    det = A[0][0] * A[1][1] - A[0][1] * A[1][0]
    xddot = (b[0] * A[1][1] - b[1] * A[0][1]) / det
    thetaddot = (b[1] * A[0][0] - b[0] * A[1][0]) / det
    
    return [vx, xddot, w, thetaddot]

# Método de Runge-Kutta de 4º orden
def runge_kutta_4(f, t_span, state0, dt, M, m):
    t0, tf = t_span
    t_values = [t0 + i * dt for i in range(int((tf - t0) / dt))]
    state = state0[:]
    states = []
    
    for t in t_values:
        states.append(state[:])
        k1 = f(state, M, m)
        k2 = f([state[i] + 0.5 * dt * k1[i] for i in range(len(state))], M, m)
        k3 = f([state[i] + 0.5 * dt * k2[i] for i in range(len(state))], M, m)
        k4 = f([state[i] + dt * k3[i] for i in range(len(state))], M, m)
        
        state = [state[i] + (dt / 6) * (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) for i in range(len(state))]
    
    return states, t_values

# Ciclo de animación
def simulate():
    global run, current_index, states, t_values, x_vals, vx_vals, theta_vals

    # Obtener valores de sliders antes de iniciar
    state0 = get_initial_conditions()
    M = M_slider.value  # La masa de la base
    m = m_slider.value  # La masa del péndulo
    t_span = (0, 10)
    dt = 0.01
    
    states, t_values = runge_kutta_4(equations, t_span, state0, dt, M, m)
    x_vals = [s[0] for s in states]
    vx_vals = [s[1] for s in states]
    theta_vals = [s[2] for s in states]

    # Configurar escena
    base.pos.x = x_vals[0]
    pendulum.pos = vector(x_vals[0] + l * sin(theta_vals[0]), 2 - l * cos(theta_vals[0]), 0)
    rod.pos = base.pos
    rod.axis = pendulum.pos - base.pos

    current_index = 0
    run = True

# Botón de inicio
def Runbutton(b):
    global run, current_index
    simulate()
    pendulum.clear_trail()  # Limpiar traza solo al reiniciar

button(text='Iniciar', bind=Runbutton)

# Crear escena
scene.title = "Masa deslizante con péndulo"
scene.background = color.cyan*0.9

pivot = vector(0, 2, 0)
line = curve(pos=[vector(-5, 2, 0), vector(5, 2, 0)], color=color.white)

base = sphere(radius=0.2, pos=vector(0, pivot.y, 0), color=color.blue)
pendulum = sphere(pos=vector(0 + l * sin(pi / 15), pivot.y - l * cos(pi / 15), 0), radius=0.2, color=color.red, make_trail=True, trail_radius=0.05)
rod = cylinder(pos=base.pos, axis=pendulum.pos - base.pos, radius=0.02, color=color.black)
velocity_arrow = arrow(pos=base.pos, axis=vector(0, 0, 0), color=color.green, shaftwidth=base.radius/2)

base_label = text(pos=vec(base.pos.x,2,0) + vector(0, 0.3, 0), text="M", xoffset=10, yoffset=10, space=30, height=0.5, border=2, font='sans', color = color.black*0.5)
pendulum_label = text(pos=pendulum.pos + vector(0, 0.3, 0), text="m", xoffset=10, yoffset=10, space=30, height=0.5, border=2, font='sans', color = color.black*0.5)

# Bucle de animación
while True:
   
    if run and current_index < len(t_values):
        rate(100)
        
        # Actualizar posiciones
        base.pos.x = x_vals[current_index]
        pendulum.pos = vector(x_vals[current_index] + l * sin(theta_vals[current_index]), pivot.y - l * cos(theta_vals[current_index]), 0)
        rod.pos = base.pos
        rod.axis = pendulum.pos - base.pos
        velocity_arrow.pos = base.pos
        velocity_arrow.axis = vector(vx_vals[current_index]*2, 0, 0)
        base_label.pos = base.pos + vector(0, 0.3, 0)
        pendulum_label.pos = pendulum.pos + vector(0, 0.3, 0)
        
        # Actualizar etiquetas con los valores de los sliders
        update_labels()
        
        current_index += 1
    elif not run:
        rate(100)
        pendulum.clear_trail()
    else: 
        current_index = 0
        base.pos.x = x_vals[current_index]
        pendulum.pos = vector(x_vals[current_index] + l * sin(theta_vals[current_index]), pivot.y - l * cos(theta_vals[current_index]), 0)
        rod.pos = base.pos
        rod.axis = pendulum.pos - base.pos
        velocity_arrow.pos = base.pos + vector(-0.3, 0, 0)
        velocity_arrow.axis = vector(vx_vals[current_index]*2, 0, 0)
        pendulum.clear_trail()
        update_labels()
        base_label.pos = base.pos + vector(0, 0.3, 0)
        pendulum_label.pos = pendulum.pos + vector(0, 0.3, 0)
